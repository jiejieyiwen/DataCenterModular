// Code generated by protoc-gen-go. DO NOT EDIT.
// source: DC_Notify.proto

package Message

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DC_Request struct {
	BGetNew              bool     `protobuf:"varint,1,opt,name=bGetNew,proto3" json:"bGetNew,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DC_Request) Reset()         { *m = DC_Request{} }
func (m *DC_Request) String() string { return proto.CompactTextString(m) }
func (*DC_Request) ProtoMessage()    {}
func (*DC_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c54bef58cc7f7e2, []int{0}
}

func (m *DC_Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DC_Request.Unmarshal(m, b)
}
func (m *DC_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DC_Request.Marshal(b, m, deterministic)
}
func (m *DC_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DC_Request.Merge(m, src)
}
func (m *DC_Request) XXX_Size() int {
	return xxx_messageInfo_DC_Request.Size(m)
}
func (m *DC_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_DC_Request.DiscardUnknown(m)
}

var xxx_messageInfo_DC_Request proto.InternalMessageInfo

func (m *DC_Request) GetBGetNew() bool {
	if m != nil {
		return m.BGetNew
	}
	return false
}

type DC_Respon struct {
	StrRespon            int32    `protobuf:"varint,1,opt,name=strRespon,proto3" json:"strRespon,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DC_Respon) Reset()         { *m = DC_Respon{} }
func (m *DC_Respon) String() string { return proto.CompactTextString(m) }
func (*DC_Respon) ProtoMessage()    {}
func (*DC_Respon) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c54bef58cc7f7e2, []int{1}
}

func (m *DC_Respon) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DC_Respon.Unmarshal(m, b)
}
func (m *DC_Respon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DC_Respon.Marshal(b, m, deterministic)
}
func (m *DC_Respon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DC_Respon.Merge(m, src)
}
func (m *DC_Respon) XXX_Size() int {
	return xxx_messageInfo_DC_Respon.Size(m)
}
func (m *DC_Respon) XXX_DiscardUnknown() {
	xxx_messageInfo_DC_Respon.DiscardUnknown(m)
}

var xxx_messageInfo_DC_Respon proto.InternalMessageInfo

func (m *DC_Respon) GetStrRespon() int32 {
	if m != nil {
		return m.StrRespon
	}
	return 0
}

func init() {
	proto.RegisterType((*DC_Request)(nil), "Message.DC_Request")
	proto.RegisterType((*DC_Respon)(nil), "Message.DC_Respon")
}

func init() { proto.RegisterFile("DC_Notify.proto", fileDescriptor_9c54bef58cc7f7e2) }

var fileDescriptor_9c54bef58cc7f7e2 = []byte{
	// 147 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x77, 0x71, 0x8e, 0xf7,
	0xcb, 0x2f, 0xc9, 0x4c, 0xab, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xf7, 0x4d, 0x2d,
	0x2e, 0x4e, 0x4c, 0x4f, 0x55, 0x52, 0xe3, 0xe2, 0x72, 0x71, 0x8e, 0x0f, 0x4a, 0x2d, 0x2c, 0x4d,
	0x2d, 0x2e, 0x11, 0x92, 0xe0, 0x62, 0x4f, 0x72, 0x4f, 0x2d, 0xf1, 0x4b, 0x2d, 0x97, 0x60, 0x54,
	0x60, 0xd4, 0xe0, 0x08, 0x82, 0x71, 0x95, 0x34, 0xb9, 0x38, 0xc1, 0xea, 0x8a, 0x0b, 0xf2, 0xf3,
	0x84, 0x64, 0xb8, 0x38, 0x8b, 0x4b, 0x8a, 0x20, 0x1c, 0xb0, 0x42, 0xd6, 0x20, 0x84, 0x80, 0x91,
	0x27, 0xc2, 0xba, 0xcc, 0xe4, 0xc4, 0x92, 0xcc, 0xfc, 0x3c, 0x21, 0x33, 0xb0, 0x6e, 0x88, 0x0b,
	0x84, 0x84, 0xf5, 0xa0, 0x96, 0xeb, 0x21, 0x6c, 0x96, 0x12, 0x42, 0x15, 0x04, 0x19, 0xa4, 0xc4,
	0x90, 0xc4, 0x06, 0x76, 0xad, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x3c, 0x63, 0x26, 0x2f, 0xc0,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DC_NotificationClient is the client API for DC_Notification service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DC_NotificationClient interface {
	DC_Notify(ctx context.Context, in *DC_Request, opts ...grpc.CallOption) (*DC_Respon, error)
}

type dC_NotificationClient struct {
	cc *grpc.ClientConn
}

func NewDC_NotificationClient(cc *grpc.ClientConn) DC_NotificationClient {
	return &dC_NotificationClient{cc}
}

func (c *dC_NotificationClient) DC_Notify(ctx context.Context, in *DC_Request, opts ...grpc.CallOption) (*DC_Respon, error) {
	out := new(DC_Respon)
	err := c.cc.Invoke(ctx, "/Message.DC_Notification/DC_Notify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DC_NotificationServer is the server API for DC_Notification service.
type DC_NotificationServer interface {
	DC_Notify(context.Context, *DC_Request) (*DC_Respon, error)
}

// UnimplementedDC_NotificationServer can be embedded to have forward compatible implementations.
type UnimplementedDC_NotificationServer struct {
}

func (*UnimplementedDC_NotificationServer) DC_Notify(ctx context.Context, req *DC_Request) (*DC_Respon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DC_Notify not implemented")
}

func RegisterDC_NotificationServer(s *grpc.Server, srv DC_NotificationServer) {
	s.RegisterService(&_DC_Notification_serviceDesc, srv)
}

func _DC_Notification_DC_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DC_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DC_NotificationServer).DC_Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Message.DC_Notification/DC_Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DC_NotificationServer).DC_Notify(ctx, req.(*DC_Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _DC_Notification_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Message.DC_Notification",
	HandlerType: (*DC_NotificationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DC_Notify",
			Handler:    _DC_Notification_DC_Notify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "DC_Notify.proto",
}
